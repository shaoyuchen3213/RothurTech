1. Exception handling
    An exception is thrown from controller - > Does @ExceptionHandler exist same controller   ->  Is exception annotated with @ReponseStatus
                                                                  Yes                                         Exception will handle by Spring's
                                                      It will be handle by that @Exception                  ReponseStatusExceptionResoluver class
2. Validation
    @NotNull, @NotBlank, @Min, @Max,  @Pattern(regex), @Email

3. Cache
    so if we are cacheless, we need to fetch data from database again, if there is a cache, it will speed up. Request can get data from the cache
    @EnableCache, @Cacheable
    CacheManager


    Eviction Policy
    -lru, least recent used,  LinkedHashMap(LinkedList + HashMap
        3
    ->d4  d3  d2  ->

    -lfu,   least frequent used
    -no eviction
    - random removal
    - most recently used

    consistence available

4. Relational database  sql
    database
    DBMS  DATABASE MANAGEMENT SYSTEM
    SQL   structured query Language

    database normalization: limited the redundant data to store efficiently
        1nf(first norm form): each table cell should contain a single value, each record needs to be unique
        2nf: follow the 1nf, single column primary key
        3nf: follow 2nf, has no transitive functional dependencies
5. No relational database(no sql database)
    major categories of non-relational database
        document data stores: MongoDB, CouchDB
        collection -> tables
        document -> row
        field -> column

        key-value database: redis
        Graph data store: Neo4j, GrapDB

    CAP:
        - Consistency
        - Availability
        - Parition tolerance

        AP: Dynamo, Cassandra, CouchBB
        CP: MongoDB
    difference between SQL AND NOSQL
    SQL: relational database, we have relation between each table. Predefine schema, vertical scaling, ACID: Availability, consistency, Identical,
    nosql: non-relational, they don't have relationship, dynamic schema, horizontal scaling